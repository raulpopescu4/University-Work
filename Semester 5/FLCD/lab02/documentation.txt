https://github.com/raulpopescu4/University-Work/tree/main/Semester%205/FLCD/lab02

Class: SymbolTable
Description:
    The SymbolTable class is a data structure designed for managing symbolic names, such as
identifiers and constants, encountered during the compilation of source code. It is a part of the
symbol table system and provides methods for adding, searching, and removing symbolic
names. The symbol table utilizes a hash table as its underlying data structure, but we will focus
on the symbol table implementation, since the 2 of them are almost the same.

Methods:
    __init__(self, size)
        Initializes a SymbolTable instance with the specified size.

    get_size(self)
        Returns the current size of the SymbolTable.

    set_size(self, size)
        Sets the size of the SymbolTable to the specified size.

    get_term(self, position)
        Retrieves the symbolic name from the SymbolTable at the specified position.

    search(self, term)
        Searches for the specified symbolic name in the SymbolTable.

    exists(self, term)
        Checks if the specified term exists in the SymbolTable.

    add(self, term)
        Adds the specified symbolic name to the SymbolTable and returns its position. If the name already exists, it returns the existing position.
		

    remove(self, term)
        Removes the specified symbol table from the SymbolTable if the term is not found, it raises an exception

    __str__(self)
        Returns a string representation of the SymbolTable.

Attributes:
    size
        An integer representing the size of the SymbolTable.

    table
        An instance of the HashTable class representing the actual data structure used for storing the symbols.
		The hashtable is implemented using a list of lists. The hashtable also has a size. An lement from the table has as its position a pair of indicies, the first one representing the index of the list in which the element should be stored and the second one being the position in that list.
		The hash function was computed as the sum of the ASCII codes of the characters modulo the size of the list.
	
	