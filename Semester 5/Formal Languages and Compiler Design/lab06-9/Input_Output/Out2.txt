ACCEPTED
Production strings: [program -> [start, compound_statement], compound_statement -> [{, statement_list, }], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [write_statement], write_statement -> [write, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [write_statement], write_statement -> [write, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [CONST], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [string], statement_list -> [statement_list, statement], statement -> [structure_statement], structure_statement -> [if_statement], if_statement -> [if, (, condition, ), {, statement, }, else, {, statement, }], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [CONST], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], condition -> [ar_expression, relation, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], relation -> [>], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [structure_statement], structure_statement -> [if_statement], if_statement -> [if, (, condition, ), {, statement, }, else, {, statement, }], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], condition -> [ar_expression, relation, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], relation -> [>], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int]]
Production number: [0, 3, 2, 4, 9, 24, 2, 4, 9, 24, 2, 4, 7, 20, 45, 27, 2, 4, 6, 13, 15, 18, 2, 5, 11, 21, 4, 7, 20, 45, 27, 4, 7, 20, 45, 26, 34, 45, 26, 33, 45, 26, 2, 5, 11, 21, 4, 7, 20, 45, 26, 4, 7, 20, 45, 26, 34, 45, 26, 33, 45, 26, 2, 4, 6, 13, 15, 17, 2, 4, 8, 23, 2, 4, 8, 23, 2, 4, 8, 23, 2, 4, 6, 13, 15, 17, 2, 4, 6, 13, 15, 17, 1, 4, 6, 13, 15, 17]
The output tree: 
ParsingTree.ParsingTreeRow: index = 0, info = program, leftChild = 1, rightChild = -1, parent = -1, level = 0
ParsingTree.ParsingTreeRow: index = 1, info = start, leftChild = -1, rightChild = 2, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 2, info = compound_statement, leftChild = 3, rightChild = -1, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 3, info = {, leftChild = -1, rightChild = 4, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 4, info = statement_list, leftChild = 5, rightChild = 182, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 182, info = }, leftChild = -1, rightChild = -1, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 5, info = statement_list, leftChild = 6, rightChild = 13, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 13, info = statement, leftChild = 14, rightChild = -1, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 6, info = simple_statement, leftChild = 7, rightChild = 12, parent = 5, level = 4
ParsingTree.ParsingTreeRow: index = 12, info = ;, leftChild = -1, rightChild = -1, parent = 5, level = 4
ParsingTree.ParsingTreeRow: index = 14, info = statement_list, leftChild = 15, rightChild = 22, parent = 13, level = 4
ParsingTree.ParsingTreeRow: index = 22, info = statement, leftChild = 23, rightChild = -1, parent = 13, level = 4
ParsingTree.ParsingTreeRow: index = 7, info = write_statement, leftChild = 8, rightChild = -1, parent = 6, level = 5
ParsingTree.ParsingTreeRow: index = 15, info = simple_statement, leftChild = 16, rightChild = 21, parent = 14, level = 5
ParsingTree.ParsingTreeRow: index = 21, info = ;, leftChild = -1, rightChild = -1, parent = 14, level = 5
ParsingTree.ParsingTreeRow: index = 23, info = statement_list, leftChild = 24, rightChild = 32, parent = 22, level = 5
ParsingTree.ParsingTreeRow: index = 32, info = statement, leftChild = 33, rightChild = -1, parent = 22, level = 5
ParsingTree.ParsingTreeRow: index = 8, info = write, leftChild = -1, rightChild = 9, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 9, info = (, leftChild = -1, rightChild = 10, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 10, info = IDENTIFIER, leftChild = -1, rightChild = 11, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 11, info = ), leftChild = -1, rightChild = -1, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 16, info = write_statement, leftChild = 17, rightChild = -1, parent = 15, level = 6
ParsingTree.ParsingTreeRow: index = 24, info = simple_statement, leftChild = 25, rightChild = 31, parent = 23, level = 6
ParsingTree.ParsingTreeRow: index = 31, info = ;, leftChild = -1, rightChild = -1, parent = 23, level = 6
ParsingTree.ParsingTreeRow: index = 33, info = statement_list, leftChild = 34, rightChild = 41, parent = 32, level = 6
ParsingTree.ParsingTreeRow: index = 41, info = statement, leftChild = 42, rightChild = -1, parent = 32, level = 6
ParsingTree.ParsingTreeRow: index = 17, info = write, leftChild = -1, rightChild = 18, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 18, info = (, leftChild = -1, rightChild = 19, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 19, info = IDENTIFIER, leftChild = -1, rightChild = 20, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 20, info = ), leftChild = -1, rightChild = -1, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 25, info = assignment_statement, leftChild = 26, rightChild = -1, parent = 24, level = 7
ParsingTree.ParsingTreeRow: index = 34, info = simple_statement, leftChild = 35, rightChild = 40, parent = 33, level = 7
ParsingTree.ParsingTreeRow: index = 40, info = ;, leftChild = -1, rightChild = -1, parent = 33, level = 7
ParsingTree.ParsingTreeRow: index = 42, info = statement_list, leftChild = 43, rightChild = 80, parent = 41, level = 7
ParsingTree.ParsingTreeRow: index = 80, info = statement, leftChild = 81, rightChild = -1, parent = 41, level = 7
ParsingTree.ParsingTreeRow: index = 26, info = IDENTIFIER, leftChild = -1, rightChild = 27, parent = 25, level = 8
ParsingTree.ParsingTreeRow: index = 27, info = =, leftChild = -1, rightChild = 28, parent = 25, level = 8
ParsingTree.ParsingTreeRow: index = 28, info = ar_expression, leftChild = 29, rightChild = -1, parent = 25, level = 8
ParsingTree.ParsingTreeRow: index = 35, info = declaration, leftChild = 36, rightChild = -1, parent = 34, level = 8
ParsingTree.ParsingTreeRow: index = 43, info = structure_statement, leftChild = 44, rightChild = -1, parent = 42, level = 8
ParsingTree.ParsingTreeRow: index = 81, info = statement_list, leftChild = 82, rightChild = 119, parent = 80, level = 8
ParsingTree.ParsingTreeRow: index = 119, info = statement, leftChild = 120, rightChild = -1, parent = 80, level = 8
ParsingTree.ParsingTreeRow: index = 29, info = term, leftChild = 30, rightChild = -1, parent = 28, level = 9
ParsingTree.ParsingTreeRow: index = 36, info = primitive_declaration, leftChild = 37, rightChild = -1, parent = 35, level = 9
ParsingTree.ParsingTreeRow: index = 44, info = if_statement, leftChild = 45, rightChild = -1, parent = 43, level = 9
ParsingTree.ParsingTreeRow: index = 82, info = structure_statement, leftChild = 83, rightChild = -1, parent = 81, level = 9
ParsingTree.ParsingTreeRow: index = 120, info = statement_list, leftChild = 121, rightChild = 128, parent = 119, level = 9
ParsingTree.ParsingTreeRow: index = 128, info = statement, leftChild = 129, rightChild = -1, parent = 119, level = 9
ParsingTree.ParsingTreeRow: index = 30, info = CONST, leftChild = -1, rightChild = -1, parent = 29, level = 10
ParsingTree.ParsingTreeRow: index = 37, info = simple_type, leftChild = 38, rightChild = 39, parent = 36, level = 10
ParsingTree.ParsingTreeRow: index = 39, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 36, level = 10
ParsingTree.ParsingTreeRow: index = 45, info = if, leftChild = -1, rightChild = 46, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 46, info = (, leftChild = -1, rightChild = 47, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 47, info = condition, leftChild = 48, rightChild = 56, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 56, info = ), leftChild = -1, rightChild = 57, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 57, info = {, leftChild = -1, rightChild = 58, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 58, info = statement, leftChild = 59, rightChild = 67, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 67, info = }, leftChild = -1, rightChild = 68, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 68, info = else, leftChild = -1, rightChild = 69, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 69, info = {, leftChild = -1, rightChild = 70, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 70, info = statement, leftChild = 71, rightChild = 79, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 79, info = }, leftChild = -1, rightChild = -1, parent = 44, level = 10
ParsingTree.ParsingTreeRow: index = 83, info = if_statement, leftChild = 84, rightChild = -1, parent = 82, level = 10
ParsingTree.ParsingTreeRow: index = 121, info = simple_statement, leftChild = 122, rightChild = 127, parent = 120, level = 10
ParsingTree.ParsingTreeRow: index = 127, info = ;, leftChild = -1, rightChild = -1, parent = 120, level = 10
ParsingTree.ParsingTreeRow: index = 129, info = statement_list, leftChild = 130, rightChild = 137, parent = 128, level = 10
ParsingTree.ParsingTreeRow: index = 137, info = statement, leftChild = 138, rightChild = -1, parent = 128, level = 10
ParsingTree.ParsingTreeRow: index = 38, info = string, leftChild = -1, rightChild = -1, parent = 37, level = 11
ParsingTree.ParsingTreeRow: index = 48, info = simple_statement, leftChild = 49, rightChild = 55, parent = 47, level = 11
ParsingTree.ParsingTreeRow: index = 55, info = ;, leftChild = -1, rightChild = -1, parent = 47, level = 11
ParsingTree.ParsingTreeRow: index = 59, info = simple_statement, leftChild = 60, rightChild = 66, parent = 58, level = 11
ParsingTree.ParsingTreeRow: index = 66, info = ;, leftChild = -1, rightChild = -1, parent = 58, level = 11
ParsingTree.ParsingTreeRow: index = 71, info = ar_expression, leftChild = 72, rightChild = 74, parent = 70, level = 11
ParsingTree.ParsingTreeRow: index = 74, info = relation, leftChild = 75, rightChild = 76, parent = 70, level = 11
ParsingTree.ParsingTreeRow: index = 76, info = ar_expression, leftChild = 77, rightChild = -1, parent = 70, level = 11
ParsingTree.ParsingTreeRow: index = 84, info = if, leftChild = -1, rightChild = 85, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 85, info = (, leftChild = -1, rightChild = 86, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 86, info = condition, leftChild = 87, rightChild = 95, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 95, info = ), leftChild = -1, rightChild = 96, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 96, info = {, leftChild = -1, rightChild = 97, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 97, info = statement, leftChild = 98, rightChild = 106, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 106, info = }, leftChild = -1, rightChild = 107, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 107, info = else, leftChild = -1, rightChild = 108, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 108, info = {, leftChild = -1, rightChild = 109, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 109, info = statement, leftChild = 110, rightChild = 118, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 118, info = }, leftChild = -1, rightChild = -1, parent = 83, level = 11
ParsingTree.ParsingTreeRow: index = 122, info = declaration, leftChild = 123, rightChild = -1, parent = 121, level = 11
ParsingTree.ParsingTreeRow: index = 130, info = simple_statement, leftChild = 131, rightChild = 136, parent = 129, level = 11
ParsingTree.ParsingTreeRow: index = 136, info = ;, leftChild = -1, rightChild = -1, parent = 129, level = 11
ParsingTree.ParsingTreeRow: index = 138, info = statement_list, leftChild = 139, rightChild = 146, parent = 137, level = 11
ParsingTree.ParsingTreeRow: index = 146, info = statement, leftChild = 147, rightChild = -1, parent = 137, level = 11
ParsingTree.ParsingTreeRow: index = 49, info = assignment_statement, leftChild = 50, rightChild = -1, parent = 48, level = 12
ParsingTree.ParsingTreeRow: index = 60, info = assignment_statement, leftChild = 61, rightChild = -1, parent = 59, level = 12
ParsingTree.ParsingTreeRow: index = 72, info = term, leftChild = 73, rightChild = -1, parent = 71, level = 12
ParsingTree.ParsingTreeRow: index = 75, info = >, leftChild = -1, rightChild = -1, parent = 74, level = 12
ParsingTree.ParsingTreeRow: index = 77, info = term, leftChild = 78, rightChild = -1, parent = 76, level = 12
ParsingTree.ParsingTreeRow: index = 87, info = simple_statement, leftChild = 88, rightChild = 94, parent = 86, level = 12
ParsingTree.ParsingTreeRow: index = 94, info = ;, leftChild = -1, rightChild = -1, parent = 86, level = 12
ParsingTree.ParsingTreeRow: index = 98, info = simple_statement, leftChild = 99, rightChild = 105, parent = 97, level = 12
ParsingTree.ParsingTreeRow: index = 105, info = ;, leftChild = -1, rightChild = -1, parent = 97, level = 12
ParsingTree.ParsingTreeRow: index = 110, info = ar_expression, leftChild = 111, rightChild = 113, parent = 109, level = 12
ParsingTree.ParsingTreeRow: index = 113, info = relation, leftChild = 114, rightChild = 115, parent = 109, level = 12
ParsingTree.ParsingTreeRow: index = 115, info = ar_expression, leftChild = 116, rightChild = -1, parent = 109, level = 12
ParsingTree.ParsingTreeRow: index = 123, info = primitive_declaration, leftChild = 124, rightChild = -1, parent = 122, level = 12
ParsingTree.ParsingTreeRow: index = 131, info = read_statement, leftChild = 132, rightChild = -1, parent = 130, level = 12
ParsingTree.ParsingTreeRow: index = 139, info = simple_statement, leftChild = 140, rightChild = 145, parent = 138, level = 12
ParsingTree.ParsingTreeRow: index = 145, info = ;, leftChild = -1, rightChild = -1, parent = 138, level = 12
ParsingTree.ParsingTreeRow: index = 147, info = statement_list, leftChild = 148, rightChild = 155, parent = 146, level = 12
ParsingTree.ParsingTreeRow: index = 155, info = statement, leftChild = 156, rightChild = -1, parent = 146, level = 12
ParsingTree.ParsingTreeRow: index = 50, info = IDENTIFIER, leftChild = -1, rightChild = 51, parent = 49, level = 13
ParsingTree.ParsingTreeRow: index = 51, info = =, leftChild = -1, rightChild = 52, parent = 49, level = 13
ParsingTree.ParsingTreeRow: index = 52, info = ar_expression, leftChild = 53, rightChild = -1, parent = 49, level = 13
ParsingTree.ParsingTreeRow: index = 61, info = IDENTIFIER, leftChild = -1, rightChild = 62, parent = 60, level = 13
ParsingTree.ParsingTreeRow: index = 62, info = =, leftChild = -1, rightChild = 63, parent = 60, level = 13
ParsingTree.ParsingTreeRow: index = 63, info = ar_expression, leftChild = 64, rightChild = -1, parent = 60, level = 13
ParsingTree.ParsingTreeRow: index = 73, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 72, level = 13
ParsingTree.ParsingTreeRow: index = 78, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 77, level = 13
ParsingTree.ParsingTreeRow: index = 88, info = assignment_statement, leftChild = 89, rightChild = -1, parent = 87, level = 13
ParsingTree.ParsingTreeRow: index = 99, info = assignment_statement, leftChild = 100, rightChild = -1, parent = 98, level = 13
ParsingTree.ParsingTreeRow: index = 111, info = term, leftChild = 112, rightChild = -1, parent = 110, level = 13
ParsingTree.ParsingTreeRow: index = 114, info = >, leftChild = -1, rightChild = -1, parent = 113, level = 13
ParsingTree.ParsingTreeRow: index = 116, info = term, leftChild = 117, rightChild = -1, parent = 115, level = 13
ParsingTree.ParsingTreeRow: index = 124, info = simple_type, leftChild = 125, rightChild = 126, parent = 123, level = 13
ParsingTree.ParsingTreeRow: index = 126, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 123, level = 13
ParsingTree.ParsingTreeRow: index = 132, info = read, leftChild = -1, rightChild = 133, parent = 131, level = 13
ParsingTree.ParsingTreeRow: index = 133, info = (, leftChild = -1, rightChild = 134, parent = 131, level = 13
ParsingTree.ParsingTreeRow: index = 134, info = IDENTIFIER, leftChild = -1, rightChild = 135, parent = 131, level = 13
ParsingTree.ParsingTreeRow: index = 135, info = ), leftChild = -1, rightChild = -1, parent = 131, level = 13
ParsingTree.ParsingTreeRow: index = 140, info = read_statement, leftChild = 141, rightChild = -1, parent = 139, level = 13
ParsingTree.ParsingTreeRow: index = 148, info = simple_statement, leftChild = 149, rightChild = 154, parent = 147, level = 13
ParsingTree.ParsingTreeRow: index = 154, info = ;, leftChild = -1, rightChild = -1, parent = 147, level = 13
ParsingTree.ParsingTreeRow: index = 156, info = statement_list, leftChild = 157, rightChild = 164, parent = 155, level = 13
ParsingTree.ParsingTreeRow: index = 164, info = statement, leftChild = 165, rightChild = -1, parent = 155, level = 13
ParsingTree.ParsingTreeRow: index = 53, info = term, leftChild = 54, rightChild = -1, parent = 52, level = 14
ParsingTree.ParsingTreeRow: index = 64, info = term, leftChild = 65, rightChild = -1, parent = 63, level = 14
ParsingTree.ParsingTreeRow: index = 89, info = IDENTIFIER, leftChild = -1, rightChild = 90, parent = 88, level = 14
ParsingTree.ParsingTreeRow: index = 90, info = =, leftChild = -1, rightChild = 91, parent = 88, level = 14
ParsingTree.ParsingTreeRow: index = 91, info = ar_expression, leftChild = 92, rightChild = -1, parent = 88, level = 14
ParsingTree.ParsingTreeRow: index = 100, info = IDENTIFIER, leftChild = -1, rightChild = 101, parent = 99, level = 14
ParsingTree.ParsingTreeRow: index = 101, info = =, leftChild = -1, rightChild = 102, parent = 99, level = 14
ParsingTree.ParsingTreeRow: index = 102, info = ar_expression, leftChild = 103, rightChild = -1, parent = 99, level = 14
ParsingTree.ParsingTreeRow: index = 112, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 111, level = 14
ParsingTree.ParsingTreeRow: index = 117, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 116, level = 14
ParsingTree.ParsingTreeRow: index = 125, info = int, leftChild = -1, rightChild = -1, parent = 124, level = 14
ParsingTree.ParsingTreeRow: index = 141, info = read, leftChild = -1, rightChild = 142, parent = 140, level = 14
ParsingTree.ParsingTreeRow: index = 142, info = (, leftChild = -1, rightChild = 143, parent = 140, level = 14
ParsingTree.ParsingTreeRow: index = 143, info = IDENTIFIER, leftChild = -1, rightChild = 144, parent = 140, level = 14
ParsingTree.ParsingTreeRow: index = 144, info = ), leftChild = -1, rightChild = -1, parent = 140, level = 14
ParsingTree.ParsingTreeRow: index = 149, info = read_statement, leftChild = 150, rightChild = -1, parent = 148, level = 14
ParsingTree.ParsingTreeRow: index = 157, info = simple_statement, leftChild = 158, rightChild = 163, parent = 156, level = 14
ParsingTree.ParsingTreeRow: index = 163, info = ;, leftChild = -1, rightChild = -1, parent = 156, level = 14
ParsingTree.ParsingTreeRow: index = 165, info = statement_list, leftChild = 166, rightChild = 173, parent = 164, level = 14
ParsingTree.ParsingTreeRow: index = 173, info = statement, leftChild = 174, rightChild = -1, parent = 164, level = 14
ParsingTree.ParsingTreeRow: index = 54, info = CONST, leftChild = -1, rightChild = -1, parent = 53, level = 15
ParsingTree.ParsingTreeRow: index = 65, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 64, level = 15
ParsingTree.ParsingTreeRow: index = 92, info = term, leftChild = 93, rightChild = -1, parent = 91, level = 15
ParsingTree.ParsingTreeRow: index = 103, info = term, leftChild = 104, rightChild = -1, parent = 102, level = 15
ParsingTree.ParsingTreeRow: index = 150, info = read, leftChild = -1, rightChild = 151, parent = 149, level = 15
ParsingTree.ParsingTreeRow: index = 151, info = (, leftChild = -1, rightChild = 152, parent = 149, level = 15
ParsingTree.ParsingTreeRow: index = 152, info = IDENTIFIER, leftChild = -1, rightChild = 153, parent = 149, level = 15
ParsingTree.ParsingTreeRow: index = 153, info = ), leftChild = -1, rightChild = -1, parent = 149, level = 15
ParsingTree.ParsingTreeRow: index = 158, info = declaration, leftChild = 159, rightChild = -1, parent = 157, level = 15
ParsingTree.ParsingTreeRow: index = 166, info = simple_statement, leftChild = 167, rightChild = 172, parent = 165, level = 15
ParsingTree.ParsingTreeRow: index = 172, info = ;, leftChild = -1, rightChild = -1, parent = 165, level = 15
ParsingTree.ParsingTreeRow: index = 174, info = statement, leftChild = 175, rightChild = -1, parent = 173, level = 15
ParsingTree.ParsingTreeRow: index = 93, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 92, level = 16
ParsingTree.ParsingTreeRow: index = 104, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 103, level = 16
ParsingTree.ParsingTreeRow: index = 159, info = primitive_declaration, leftChild = 160, rightChild = -1, parent = 158, level = 16
ParsingTree.ParsingTreeRow: index = 167, info = declaration, leftChild = 168, rightChild = -1, parent = 166, level = 16
ParsingTree.ParsingTreeRow: index = 175, info = simple_statement, leftChild = 176, rightChild = 181, parent = 174, level = 16
ParsingTree.ParsingTreeRow: index = 181, info = ;, leftChild = -1, rightChild = -1, parent = 174, level = 16
ParsingTree.ParsingTreeRow: index = 160, info = simple_type, leftChild = 161, rightChild = 162, parent = 159, level = 17
ParsingTree.ParsingTreeRow: index = 162, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 159, level = 17
ParsingTree.ParsingTreeRow: index = 168, info = primitive_declaration, leftChild = 169, rightChild = -1, parent = 167, level = 17
ParsingTree.ParsingTreeRow: index = 176, info = declaration, leftChild = 177, rightChild = -1, parent = 175, level = 17
ParsingTree.ParsingTreeRow: index = 161, info = int, leftChild = -1, rightChild = -1, parent = 160, level = 18
ParsingTree.ParsingTreeRow: index = 169, info = simple_type, leftChild = 170, rightChild = 171, parent = 168, level = 18
ParsingTree.ParsingTreeRow: index = 171, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 168, level = 18
ParsingTree.ParsingTreeRow: index = 177, info = primitive_declaration, leftChild = 178, rightChild = -1, parent = 176, level = 18
ParsingTree.ParsingTreeRow: index = 170, info = int, leftChild = -1, rightChild = -1, parent = 169, level = 19
ParsingTree.ParsingTreeRow: index = 178, info = simple_type, leftChild = 179, rightChild = 180, parent = 177, level = 19
ParsingTree.ParsingTreeRow: index = 180, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 177, level = 19
ParsingTree.ParsingTreeRow: index = 179, info = int, leftChild = -1, rightChild = -1, parent = 178, level = 20
