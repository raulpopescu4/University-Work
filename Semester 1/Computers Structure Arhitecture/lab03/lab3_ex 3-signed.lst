     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0200                        a dw 2
    14 00000002 05                          b db 5
    15 00000003 04                          c db 4
    16 00000004 03                          d db 3
    17 00000005 02000000                    e dd 2
    18 00000009 0A00000000000000            x dq 10
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  
    23                                  ;(a*2+b/2+e)/(c-d)+x/a; a-word; b,c,d-byte; e-doubleword; x-qword
    24                                  segment code use32 class=code
    25                                      start:
    26                                          
    27 00000000 B800000000                      mov eax, 0
    28 00000005 B900000000                      mov ecx, 0
    29 0000000A BB00000000                      mov ebx, 0
    30 0000000F BA00000000                      mov edx, 0
    31                                          
    32 00000014 B002                            mov al, 2
    33 00000016 668B0D[00000000]                mov cx, [a]
    34 0000001D 66F7E9                          imul cx
    35 00000020 98                              cwde
    36 00000021 89C1                            mov ecx, eax
    37                                          
    38 00000023 B800000000                      mov eax, 0
    39 00000028 030D[05000000]                  add ecx, [e]
    40 0000002E B302                            mov bl, 2
    41 00000030 A0[02000000]                    mov al, [b]
    42 00000035 6698                            cbw
    43 00000037 F6FB                            idiv bl
    44                                          
    45 00000039 BB00000000                      mov ebx, 0
    46 0000003E 00C1                            add cl, al
    47 00000040 89C8                            mov eax, ecx
    48 00000042 99                              cdq
    49 00000043 8A1D[03000000]                  mov bl, [c]
    50 00000049 2A1D[04000000]                  sub bl, [d]
    51 0000004F F6FB                            idiv bl
    52 00000051 89C1                            mov ecx, eax
    53 00000053 B800000000                      mov eax, 0
    54 00000058 A1[09000000]                    mov eax, [x+0]
    55 0000005D 8B1D[0D000000]                  mov ebx, [x+4]
    56 00000063 668B1D[00000000]                mov bx, [a]
    57 0000006A 66F7FB                          idiv bx
    58 0000006D 01C1                            add ecx, eax
    59 0000006F 11D3                            adc ebx, edx
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          
    65 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
