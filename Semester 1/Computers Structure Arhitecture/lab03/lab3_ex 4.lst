     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2
    14 00000001 0A                          b db 10
    15 00000002 3011                        c dw 4400
    16 00000004 A6940800                    e dd 562342
    17 00000008 42D2FEAA09000000            x dq 41523532354
    18                                      
    19                                  
    20                                  ; (a+b*c+2/c)/(2+a)+e+x; a,b-byte; c-word; e-doubleword; x-qword
    21                                  segment code use32 class=code
    22                                      start:
    23                                      
    24 00000000 B800000000                      mov eax, 0
    25 00000005 BB00000000                      mov ebx, 0
    26 0000000A B900000000                      mov ecx, 0
    27 0000000F BA00000000                      mov edx, 0
    28                                          
    29 00000014 66A1[02000000]                  mov ax, [c]
    30 0000001A 8A1D[01000000]                  mov bl, [b]
    31 00000020 66F7E3                          mul bx                ; ecx <- b*c 
    32 00000023 6652                            push dx
    33 00000025 6650                            push ax
    34 00000027 59                              pop ecx
    35                                          
    36 00000028 B800000000                      mov eax, 0
    37 0000002D BB00000000                      mov ebx, 0
    38 00000032 BA00000000                      mov edx, 0
    39 00000037 B002                            mov al, 2                  ; ecx <- (a+b*c+2/c)
    40 00000039 668B1D[02000000]                mov bx, [c] 
    41 00000040 66F7F3                          div bx
    42 00000043 01C1                            add ecx, eax 
    43 00000045 BB00000000                      mov ebx, 0
    44 0000004A 8A1D[00000000]                  mov bl, [a]
    45 00000050 01D9                            add ecx, ebx
    46                                          
    47 00000052 B800000000                      mov eax, 0
    48 00000057 BB00000000                      mov ebx, 0
    49 0000005C BA00000000                      mov edx, 0
    50 00000061 8B1D[04000000]                  mov ebx, [e]
    51 00000067 01D9                            add ecx, ebx
    52 00000069 A1[08000000]                    mov eax, [x+0]
    53 0000006E 8B15[0C000000]                  mov edx, [x+4]
    54 00000074 01C8                            add eax, ecx
    55 00000076 83D200                          adc edx, 0
    56                                          
    57                                          
    58                                          
    59                                          
