     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0200                        a dw 2
    14 00000002 05                          b db 5
    15 00000003 04                          c db 4
    16 00000004 03                          d db 3
    17 00000005 02000000                    e dd 2
    18 00000009 0A00000000000000            x dq 10
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  
    23                                  ;(a*2+b/2+e)/(c-d)+x/a; a-word; b,c,d-byte; e-doubleword; x-qword
    24                                  segment code use32 class=code
    25                                      start:
    26                                          
    27 00000000 B800000000                      mov eax, 0
    28 00000005 B900000000                      mov ecx, 0
    29 0000000A BB00000000                      mov ebx, 0
    30 0000000F 66B80200                        mov ax, 2
    31 00000013 668B0D[00000000]                mov cx, [a]
    32 0000001A 66F7E1                          mul cx
    33 0000001D 6689C1                          mov cx, ax
    34 00000020 B800000000                      mov eax, 0
    35 00000025 030D[05000000]                  add ecx, [e]
    36 0000002B B302                            mov bl, 2
    37 0000002D A0[02000000]                    mov al, [b]
    38 00000032 F6F3                            div bl
    39 00000034 BB00000000                      mov ebx, 0
    40 00000039 00C1                            add cl, al
    41 0000003B 89C8                            mov eax, ecx
    42 0000003D BA00000000                      mov edx, 0
    43 00000042 8A1D[03000000]                  mov bl, [c]
    44 00000048 2A1D[04000000]                  sub bl, [d]
    45 0000004E F6F3                            div bl
    46 00000050 89C1                            mov ecx, eax
    47 00000052 B800000000                      mov eax, 0
    48 00000057 A1[09000000]                    mov eax, [x+0]
    49 0000005C 8B1D[0D000000]                  mov ebx, [x+4]
    50 00000062 668B1D[00000000]                mov bx, [a]
    51 00000069 66F7F3                          div bx
    52 0000006C 01C1                            add ecx, eax
    53 0000006E 11D3                            adc ebx, edx
    54                                          
    55                                          
    56                                          
    57                                          
    58                                          
    59 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
