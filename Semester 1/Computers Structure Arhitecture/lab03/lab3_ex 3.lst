     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 204E                        a dw 20000
    14 00000002 06                          b db 6
    15 00000003 05                          c db 5
    16 00000004 03                          d db 3
    17 00000005 E58B0300                    e dd 232421
    18 00000009 360DE131FA000000            x dq 1074578656566
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  
    23                                  ;(a*2+b/2+e)/(c-d)+x/a; a-word; b,c,d-byte; e-doubleword; x-qword
    24                                  segment code use32 class=code
    25                                      start:
    26                                          
    27 00000000 B800000000                      mov eax, 0
    28 00000005 B900000000                      mov ecx, 0
    29 0000000A BB00000000                      mov ebx, 0
    30 0000000F BA00000000                      mov edx, 0
    31                                          
    32 00000014 66B80200                        mov ax, 2
    33 00000018 668B0D[00000000]                mov cx, [a]
    34 0000001F 66F7E1                          mul cx        ; ecx <- a*2
    35 00000022 6652                            push dx
    36 00000024 6650                            push ax
    37 00000026 59                              pop ecx
    38                                          
    39 00000027 030D[05000000]                  add ecx, [e]
    40 0000002D B800000000                      mov eax, 0
    41 00000032 B302                            mov bl, 2             ; ecx <- (a*2+b/2+e)
    42 00000034 A0[02000000]                    mov al, [b]
    43 00000039 F6F3                            div bl
    44 0000003B 00C1                            add cl, al
    45                                         
    46 0000003D BB00000000                      mov ebx, 0
    47 00000042 BA00000000                      mov edx, 0
    48 00000047 89C8                            mov eax, ecx           ; ecx <- (a*2+b/2+e)/(c-d)
    49 00000049 8A1D[03000000]                  mov bl, [c]
    50 0000004F 2A1D[04000000]                  sub bl, [d]
    51 00000055 F7F3                            div ebx
    52 00000057 89C1                            mov ecx, eax
    53                                          
    54                                          
    55                                          
    56 00000059 B800000000                      mov eax, 0
    57 0000005E BA00000000                      mov edx, 0
    58 00000063 BB00000000                      mov ebx, 0
    59 00000068 A1[09000000]                    mov eax, [x+0]
    60 0000006D 8B1D[0D000000]                  mov ebx, [x+4]
    61 00000073 51                              push ecx
    62 00000074 B900000000                      mov ecx, 0
    63 00000079 668B0D[00000000]                mov cx, [a]
    64 00000080 F7F1                            div ecx 
    65 00000082 5B                              pop ebx
    66 00000083 01C3                            add ebx,eax        
    67                                                                    ; ecx:ebx <- (a*2+b/2+e)/(c-d)+x/a
    68                                   
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74 00000085 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000087 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
