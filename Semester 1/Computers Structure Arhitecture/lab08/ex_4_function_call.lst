     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll             ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                                       ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 FCFFFFFF                    a dd -4
    15 00000004 0A000000                    b dd 10
    16 00000008 2564202A202564203D-         format db "%d * %d = %d:%d", 0
    16 00000011 2025643A256400     
    17                                  
    18                                     ;Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate their product and display the result in the following format: "<a> * <b> = <result>". Example: "2 * 4 = 8"
    19                                     ;The values will be displayed in decimal format (base 10) with sign.
    20                                  
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A1[00000000]                    mov eax, [a]
    24 00000005 8B1D[04000000]                  mov ebx, [b]
    25 0000000B F7EB                            imul ebx
    26 0000000D 50                              push dword eax
    27 0000000E 52                              push dword edx
    28 0000000F FF35[04000000]                  push dword [b]
    29 00000015 FF35[00000000]                  push dword [a]
    30 0000001B 68[08000000]                    push dword format
    31 00000020 FF15[00000000]                  call [printf]
    32 00000026 83C414                          add esp, 4 * 5
    33                                      
    34                                          
    35 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
