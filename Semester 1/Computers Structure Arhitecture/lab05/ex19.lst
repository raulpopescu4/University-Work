     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; Two byte strings A and B are given. Obtain the string R that contains only the even negative elements of the two strings
    12                                  segment data use32 class=data
    13 00000000 020103FDFC02FA              A db 2, 1, 3, -3, -4, 2, -6
    14                                      la equ $ - A
    15 00000007 0405FB07FAFE01              B db 4, 5, -5, 7, -6, -2, 1
    16                                      lb equ $ - B
    17                                      
    18 0000000E <res 00000002>              R resb 2
    19                                  
    20                                  
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 B800000000                      mov eax, 0
    24 00000005 BB00000000                      mov ebx, 0
    25 0000000A B900000000                      mov ecx, 0
    26 0000000F BA00000000                      mov edx, 0
    27                                          
    28 00000014 BE00000000                      mov esi, 0
    29 00000019 BF00000000                      mov edi, 0
    30                                          
    31 0000001E B907000000                      mov ecx, la
    32                                          start_loop_A:
    33 00000023 8A86[00000000]                      mov al, [A+esi]
    34 00000029 A801                                test al, 1
    35 0000002B D0C0                                rol al, 1
    36 0000002D 7400                                jz check_carry_A
    37                                              check_carry_A:
    38 0000002F 7202                                    jc add_to_R_A
    39 00000031 EB09                                jmp exit_loop_A
    40                                              add_to_R_A:
    41 00000033 D0C8                                    ror al, 1
    42 00000035 8887[0E000000]                          mov [R + edi], al
    43 0000003B 47                                      inc edi
    44                                              exit_loop_A:
    45 0000003C 46                                      inc esi
    46 0000003D E2E4                            loop start_loop_A
    47                                          
    48 0000003F B907000000                      mov ecx, lb
    49 00000044 BE00000000                      mov esi, 0
    50                                          start_loop_B:
    51 00000049 8A86[07000000]                      mov al, [B+esi]
    52 0000004F A801                                test al, 1
    53 00000051 D0C0                                rol al, 1
    54 00000053 7400                                jz check_carry_B
    55                                              check_carry_B:
    56 00000055 7202                                    jc add_to_R_B
    57 00000057 EB09                                jmp exit_loop_B
    58                                              add_to_R_B:
    59 00000059 D0C8                                    ror al, 1
    60 0000005B 8887[0E000000]                          mov [R + edi], al
    61 00000061 47                                      inc edi
    62                                              exit_loop_B:
    63 00000062 46                                      inc esi
    64 00000063 E2E4                            loop start_loop_B
    65                                          
    66                                          
    67 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
