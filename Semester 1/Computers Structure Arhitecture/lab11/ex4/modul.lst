     1                                  bits 32
     2                                  
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment code use32 class=code
     7                                  global convert_base2
     8                                  global convert_base16
     9                                      
    10                                  convert_base2:
    11                                      ; convert_base2(number(byte), base2(string))
    12 00000000 B800000000                  mov eax, 0
    13 00000005 8A442404                    mov al, [esp + 4]
    14 00000009 8B7C2408                    mov edi, [esp + 8]
    15 0000000D 83C707                      add edi, 7
    16 00000010 FD                          std
    17                                      while1:
    18 00000011 B102                            mov cl, 2
    19 00000013 F6F1                            div cl
    20 00000015 88C1                            mov cl, al
    21 00000017 88E0                            mov al, ah
    22 00000019 0430                            add al, '0'
    23 0000001B AA                              stosb
    24 0000001C B800000000                      mov eax, 0
    25 00000021 88C8                            mov al, cl
    26 00000023 3C00                            cmp al, 0
    27 00000025 75EA                        jne while1
    28 00000027 FC                          cld
    29 00000028 C20800                      ret 8
    30                                      
    31                                  convert_base16:
    32                                       ;convert_base16(number(byte), base16(string))
    33 0000002B B800000000                  mov eax, 0
    34 00000030 8A442404                    mov al, [esp + 4]
    35 00000034 8B7C2408                    mov edi, [esp + 8]
    36 00000038 83C701                      add edi, 1
    37 0000003B FD                          std
    38                                      while2:
    39 0000003C B110                            mov cl, 16
    40 0000003E F6F1                            div cl
    41 00000040 88C1                            mov cl, al
    42 00000042 88E0                            mov al, ah
    43 00000044 0430                            add al, '0'
    44 00000046 3C39                            cmp al, '9'
    45 00000048 7602                            jbe lower_than_10
    46 0000004A 0407                            add al, 'A' - '9' - 1
    47                                          lower_than_10:
    48 0000004C AA                              stosb
    49 0000004D B800000000                      mov eax, 0
    50 00000052 88C8                            mov al, cl
    51 00000054 3C00                            cmp al, 0
    52 00000056 75E4                        jne while2
    53 00000058 FC                          cld
    54 00000059 C20800                      ret 8
    55                                      
    56                                          ;exit(0)
    57                                          ;push    dword 0      ; push the parameter for exit onto the stack
    58                                          ;call    [exit]       ; call exit to terminate the program
