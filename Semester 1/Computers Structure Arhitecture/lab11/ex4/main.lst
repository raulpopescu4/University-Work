     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, printf
     6                                  extern convert_base2
     7                                  extern convert_base16              
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 03070D23404E                s db 3, 7, 13, 35, 64, 78
    13                                      len equ ($ - s)
    14                                      
    15 00000006 30<rept>                    base2 times 8 db '0'
    16 0000000E 00                          finish db 0
    17                                      
    18 0000000F 30<rept>                    base16 times 2 db '0'
    19 00000011 00                          finish2 db 0
    20                                      
    21 00000012 2564202D3E20626173-         format_output db "%d -> base 2: %s; base 16: %s", 10, 13, 0
    21 0000001B 6520323A2025733B20-
    21 00000024 626173652031363A20-
    21 0000002D 25730A0D00         
    22                                  
    23                                  ;4. A string of numbers is given. Show the values in base 16 and base 2.
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BB00000000                      mov ebx, 0
    27 00000005 B906000000                      mov ecx, len
    28 0000000A 83F900                          cmp ecx, 0
    29 0000000D 7456                            je final
    30                                          
    31                                          parse_string:
    32                                              ; call convert_base2
    33 0000000F B800000000                          mov eax, 0
    34 00000014 8A83[00000000]                      mov al, [s + ebx]
    35 0000001A 68[06000000]                        push base2
    36 0000001F 50                                  push eax
    37 00000020 E8(00000000)                        call convert_base2
    38                                              
    39                                              ; call convert_base16
    40 00000025 B800000000                          mov eax, 0
    41 0000002A 8A83[00000000]                      mov al, [s + ebx]
    42 00000030 68[0F000000]                        push base16
    43 00000035 50                                  push eax
    44 00000036 E8(00000000)                        call convert_base16
    45                                              
    46                                              ; print
    47 0000003B B800000000                          mov eax, 0
    48 00000040 8A83[00000000]                      mov al, [s + ebx]
    49 00000046 68[0F000000]                        push base16
    50 0000004B 68[06000000]                        push base2
    51 00000050 50                                  push eax
    52 00000051 68[12000000]                        push dword format_output
    53 00000056 FF15[00000000]                      call [printf]
    54 0000005C 83C408                              add esp, 2 * 4
    55                                              
    56                                              
    57                                              
    58 0000005F 43                                  inc ebx
    59 00000060 83FB06                              cmp ebx, len
    60 00000063 75AA                            jne parse_string
    61                                          
    62                                          final:
    63                                          
    64 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
