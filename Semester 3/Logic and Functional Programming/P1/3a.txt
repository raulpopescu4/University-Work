% Define a predicate to remove from a list all repetitive elements.
% Eg.: l=[1,2,1,4,1,3,4] => l=[2,3])
  

% myCount(l1l2...ln, elem) = 
% = 0, if n = 0
% = 1 + myCount(l2...ln, elem), if l1 = elem
% = myCount(l2...ln, elem), otherwise

% myCount(L:list, E:number, R:Number)
% myCount(i,i,o)

myCount([],_,0).
myCount([H|T], E, R1):-
    H=:=E,
    myCount(T, E, R),
    R1 is R + 1.
myCount([H|T], E, R):-
    H=\=E,
    myCount(T, E, R).

% removeOcc(l1l2...ln, elem) = 
% [], if n = 0
% removeOcc(l2...ln, elem), if elem = l1
% {l1} U removeOcc(l2...ln, elem), otherwise

% removeOcc(L:list, E:number, R:list)
% removeOcc(i,i,o)

removeOcc([],_,[]).
removeOcc([H|T], E, R):-
    H=:=E,
    removeOcc(T, E, R).
removeOcc([H|T], E, [H|R]):-
    H=\=E,
    removeOcc(T, E, R).

% removeDuplicates(l1l2...ln) = 
% [], if n = 0
% removeDuplicates(removeOcc(l2...ln, l1)), if myCount(l1) > 1
% {l1} U removeDuplicates(l2...ln), otherwise

%removeDuplicates(L:list, R:list)
%removeDuplicates(i,o)

removeDuplicates([], []).
removeDuplicates([H|T], R):-
    myCount([H|T], H, RC),
    1 < RC,
    removeOcc([H|T], H, RR),
    removeDuplicates(RR, R).
removeDuplicates([H|T], [H|R]):-
    removeDuplicates(T, R).